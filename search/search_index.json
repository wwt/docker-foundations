{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docker Foundations Hands-On Quote \" Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. \" ~ wikipedia Overview This Hands-On walk-through is designed to provide you real-world exposure to the foundational Docker instructions needed to build a Docker image and integrate it with Visual Studio Code. The outcome from this lab is both knowledge of building Docker containers plus the added benefit of learning how to utilize the container as your development environment when using Visual Studio Code. Here are some additional resources available: WWT Programmability Foundations Lab \u2014 Docker Section What You Need A Windows or macOS computer with Docker Desktop . If you are new to Docker, here is the Docker Desktop Installation Documentation . Alternatively, you can install Docker in a Linux Environment and complete the walkthrough. Visual Studio Code ( download ) What's Next The next section will guide you through getting your environment prepared for the lab.","title":"Home"},{"location":"#docker-foundations-hands-on","text":"Quote \" Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. \" ~ wikipedia","title":"Docker Foundations Hands-On"},{"location":"#overview","text":"This Hands-On walk-through is designed to provide you real-world exposure to the foundational Docker instructions needed to build a Docker image and integrate it with Visual Studio Code. The outcome from this lab is both knowledge of building Docker containers plus the added benefit of learning how to utilize the container as your development environment when using Visual Studio Code. Here are some additional resources available: WWT Programmability Foundations Lab \u2014 Docker Section","title":"Overview"},{"location":"#what-you-need","text":"A Windows or macOS computer with Docker Desktop . If you are new to Docker, here is the Docker Desktop Installation Documentation . Alternatively, you can install Docker in a Linux Environment and complete the walkthrough. Visual Studio Code ( download )","title":"What You Need"},{"location":"#whats-next","text":"The next section will guide you through getting your environment prepared for the lab.","title":"What's Next"},{"location":"sections/section_1/","text":"\u200b Setup: Visual Studio Code The What You Need section indicated that you would need to have Visual Studio Code installed on your local machine for these exercises. Visual Studio Code supports enhanced features via Extensions that can be installed from the Extensions Marketplace. The Extensions Marketplace can be found by clicking the on the left side of your Visual Studio Code window. Docker Extension The first extension to add is the Docker extension. This will provide capabilities like syntax highlighting in Dockerfiles, auto-completion of instructions, and much more. You can read more about the Extension on the Visual Studio Code Marketplace page. OPEN Visual Studio Code CLICK the Extensions Icon on the left ENTER ms-azuretools.vscode-docker in the Search Extensions in Marketplace box SELECT Install Remote Development Extension The second Visual Studio Code Extension required is the Remove Development Extension Pack. This is a bundle of Extensions for connecting to different remote environments including SSH, Containers, and Windows. This section will illustrate the additional Visual Studio Code Extension needed to integrate it with Docker. CLICK in the Search Extensions in Marketplace box ENTER ms-vscode-remote.vscode-remote-extensionpack in the Search Extensions in Marketplace box SELECT Install Note Reload the window if prompted. The Extension details will indicate that the extension is installed and enabled as seen below. What's Next Now that you have installed the required Visual Studio Code Extensions from the Marketplace you will create a new GitHub repository, clone that locally and open it in Visual Studio Code.","title":"Setup - Visual Studio Code"},{"location":"sections/section_1/#setup-visual-studio-code","text":"The What You Need section indicated that you would need to have Visual Studio Code installed on your local machine for these exercises. Visual Studio Code supports enhanced features via Extensions that can be installed from the Extensions Marketplace. The Extensions Marketplace can be found by clicking the on the left side of your Visual Studio Code window.","title":"\u200b Setup: Visual Studio Code"},{"location":"sections/section_1/#docker-extension","text":"The first extension to add is the Docker extension. This will provide capabilities like syntax highlighting in Dockerfiles, auto-completion of instructions, and much more. You can read more about the Extension on the Visual Studio Code Marketplace page. OPEN Visual Studio Code CLICK the Extensions Icon on the left ENTER ms-azuretools.vscode-docker in the Search Extensions in Marketplace box SELECT Install","title":"Docker Extension"},{"location":"sections/section_1/#remote-development-extension","text":"The second Visual Studio Code Extension required is the Remove Development Extension Pack. This is a bundle of Extensions for connecting to different remote environments including SSH, Containers, and Windows. This section will illustrate the additional Visual Studio Code Extension needed to integrate it with Docker. CLICK in the Search Extensions in Marketplace box ENTER ms-vscode-remote.vscode-remote-extensionpack in the Search Extensions in Marketplace box SELECT Install Note Reload the window if prompted. The Extension details will indicate that the extension is installed and enabled as seen below.","title":"Remote Development Extension"},{"location":"sections/section_1/#whats-next","text":"Now that you have installed the required Visual Studio Code Extensions from the Marketplace you will create a new GitHub repository, clone that locally and open it in Visual Studio Code.","title":"What's Next"},{"location":"sections/section_2/","text":"Setup: Create and Open a New Project This section will guide you through creating a new repository on GitHub and opening that new repository in Visual Studio Code. Note There are multiple approaches to accomplish these same tasks. This section represents one workflow. Create a Repo on GitHub This workflow will start with creating a repository for your project on GitHub. GitHub provides remote version control system for your local repository and many advanced collaboration capabilities. You can learn more about GitHub in the GitHub Documentation . Note Additional Resources Git Foundations Walk Through Version Control Lab Version Control Video NAVIGATE to GitHub CLICK the New button next to Repositories NAME the repo docker-foundations-lab (#1 in the image above) SET the repo to Private (#2 in the image above) CLICK Add a README file (# 3 in the image above) CLICK Add .gitignore and SELECT Python (# 3 in the image above) CLICK Choose a license and SELECT Apache License 2.0 (# 3 in the image above) CLICK Create Repository (# 4 in the image above) Now that you have created your new repository on GitHub you can move forward with opening this new project in Visual Studio Code. Opening Your Repo in Visual Studio Code There are two ways to approach this step: Manually clone the repo from the terminal Use the functionality built into Visual Studio Code Manually Clone Method NAVIGATE to your repo on GitHub CLICK the Code button SELECT the transport (HTTPS or SSH) CLICK the Copy icon \u200b OPEN a new Terminal PASTE git clone plus that string into your Terminal Example SSH git clone git@github.com:jandiorio/docker-foundations-lab.git HTTPS git clone https://github.com/jandiorio/docker-foundations-lab.git Important The command above will clone down the repository creating a subfolder with the name of the repo in the folder where you ran the command. OPEN the new Folder in Visual Studio Code using Open Folder Clone and Open Directly in Visual Studio Code OPEN a new Visual Studio Code Window CLICK the Explorer icon CLICK Clone Repository PASTE repository string SELECT the parent directory Tip I have a folder named development where all of my development projects are located. CLICK Open in the dialog prompt to Open the Repository What's Next Now you are ready to get to the \"meat\" of the tomato...next you will walk through the basics of building a Dockerfile .","title":"Setup - Start a New Project"},{"location":"sections/section_2/#setup-create-and-open-a-new-project","text":"This section will guide you through creating a new repository on GitHub and opening that new repository in Visual Studio Code. Note There are multiple approaches to accomplish these same tasks. This section represents one workflow.","title":"Setup: Create and Open a New Project"},{"location":"sections/section_2/#create-a-repo-on-github","text":"This workflow will start with creating a repository for your project on GitHub. GitHub provides remote version control system for your local repository and many advanced collaboration capabilities. You can learn more about GitHub in the GitHub Documentation . Note Additional Resources Git Foundations Walk Through Version Control Lab Version Control Video NAVIGATE to GitHub CLICK the New button next to Repositories NAME the repo docker-foundations-lab (#1 in the image above) SET the repo to Private (#2 in the image above) CLICK Add a README file (# 3 in the image above) CLICK Add .gitignore and SELECT Python (# 3 in the image above) CLICK Choose a license and SELECT Apache License 2.0 (# 3 in the image above) CLICK Create Repository (# 4 in the image above) Now that you have created your new repository on GitHub you can move forward with opening this new project in Visual Studio Code.","title":"Create a Repo on GitHub"},{"location":"sections/section_2/#opening-your-repo-in-visual-studio-code","text":"There are two ways to approach this step: Manually clone the repo from the terminal Use the functionality built into Visual Studio Code","title":"Opening Your Repo in Visual Studio Code"},{"location":"sections/section_2/#manually-clone-method","text":"NAVIGATE to your repo on GitHub CLICK the Code button SELECT the transport (HTTPS or SSH) CLICK the Copy icon \u200b OPEN a new Terminal PASTE git clone plus that string into your Terminal Example SSH git clone git@github.com:jandiorio/docker-foundations-lab.git HTTPS git clone https://github.com/jandiorio/docker-foundations-lab.git Important The command above will clone down the repository creating a subfolder with the name of the repo in the folder where you ran the command. OPEN the new Folder in Visual Studio Code using Open Folder","title":"Manually Clone Method"},{"location":"sections/section_2/#clone-and-open-directly-in-visual-studio-code","text":"OPEN a new Visual Studio Code Window CLICK the Explorer icon CLICK Clone Repository PASTE repository string SELECT the parent directory Tip I have a folder named development where all of my development projects are located. CLICK Open in the dialog prompt to Open the Repository","title":"Clone and Open Directly in Visual Studio Code"},{"location":"sections/section_2/#whats-next","text":"Now you are ready to get to the \"meat\" of the tomato...next you will walk through the basics of building a Dockerfile .","title":"What's Next"},{"location":"sections/section_3/","text":"Build a Dockerfile This section will guide you through building a Dockerfile that will be used as part of the integration with Visual Studio Code. Scenario: Imagine you want to start a new Python-based development project and need to get your development environment setup and ready. Quote A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. A Dockerfile defines how an image is built. Once built, the Docker image is the blueprint that will be used to instantiate an ephemeral instance called a container. Selecting a Base Image Typically, the image that you will build for your projects will be based on a foundational image someone else created. There are a significant number of existing images that you can use as the base of your image. The best approach is to visit Docker Hub and see what images are available based on the focus on your project. Scenario: Your project is Python-based, so the base image will be one of the available Python images. There are very simple filtering and searching capabilities on Docker Hub that make it easy to quickly narrow down the options for your base image. NAVIGATE to https://hub.docker.com CLICK Explore CLICK Official Images CLICK Programming Languages CLICK Python Feel free to review the available images and read the supporting documentation about the images. This example will utilize a Python base image named slim-buster . Info Here are some instructions for building a base image if you so desire: Base Images Create the Initial Dockerfile Once you have selected the desired base image you can start to build your Dockerfile for the project. The first line of a Dockerfile is almost always the FROM command. The only other command that can precede FROM is ARG . This section keeps it simple and uses only FROM CREATE a new file named Dockerfile in the root of your project directory ADD the following first line \u200b FROM python:slim-buster Providing Meta Data Using the LABEL command we can include some information about the Dockerfile to increase supportability down the road. The LABEL command allows you to define a series of key and value pairs of attributes. # Define some meta data LABEL author = \"Jeff Andiorio\" email = \"jeff.andiorio@wwt.com\" Installing OS Requirements There will be many occasions where you will need to add some OS level packages that rely on a package manager for installation. In this case we are on a Debian Linux based system which uses apt as a package manager. In the Dockerfile you can use the RUN command to provide instructions to perform these package installations. The RUN instruction can be used for executing commands on the target container. This section will use the shell syntax. Check the Docker documentation for more information. # Update Debian Packages and Install Git RUN apt-get update && apt-get -y install git Since this will be our development environment we will need to have git installed in the container. Create a Working Directory A Working Directory is set to be the source directory for all subsequent RUN , CMD , COPY , and ADD Dockerfile Instructions. This walk-through will create a /development directory in our container and set it as our working directory Tip If the directory doesn't exist it will be created automatically. APPEND the WORKDIR instruction to the Dockerfile # Set the new directory WORKDIR /development Copy Files Another common need is to copy files into the container. When using the container as a development environment, Visual Studio Code will automatically mount the project directory and make the files available within the container. This relates to files you need to have available in the Docker image (aside from your development repo) like the requirements.txt file, so we can install packages. Scenario: The python project will require a couple of additional python packages. Create a requirements.txt file and make sure it's available to your Docker image. CREATE a file named requirements.txt in the project root directory ADD the text below to the file pyaml requests flake8 SAVE the file APPEND the COPY instruction to the Dockerfile # Copy requirements.txt into Container COPY requirements.txt /development Installing Python Requirements Scenario: Just having the requirements.txt file will not install the required packages. Add the 'RUN' command to the Dockerfile to install your python project requirements. APPEND the RUN instruction to the Dockerfile to install the python requirements # Install Python Requirements RUN pip install -r requirements.txt Info The 'RUN' command above will look for the requirements.txt file in the WORKDIR which is where you copied the file. Final File If you have followed all the instructions, your final Dockerfile will look similar to this: Tip The LABEL instruction will have your information. FROM python:slim-buster # Define some meta data LABEL author = \"Jeff Andiorio\" email = \"jeff.andiorio@wwt.com\" # Update Debian Packages and Install Git RUN apt-get update && apt-get -y install git # Set the new directory WORKDIR /development # Copy requirements.txt into Container COPY requirements.txt /development # Install Python Requirements RUN pip install -r requirements.txt What's Next Now that you have the completed Dockerfile created and have successfully utilized several of the basic Dockerfile instructions how can you use that file?","title":"Create a Dockerfile"},{"location":"sections/section_3/#build-a-dockerfile","text":"This section will guide you through building a Dockerfile that will be used as part of the integration with Visual Studio Code. Scenario: Imagine you want to start a new Python-based development project and need to get your development environment setup and ready. Quote A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. A Dockerfile defines how an image is built. Once built, the Docker image is the blueprint that will be used to instantiate an ephemeral instance called a container.","title":"Build a Dockerfile"},{"location":"sections/section_3/#selecting-a-base-image","text":"Typically, the image that you will build for your projects will be based on a foundational image someone else created. There are a significant number of existing images that you can use as the base of your image. The best approach is to visit Docker Hub and see what images are available based on the focus on your project. Scenario: Your project is Python-based, so the base image will be one of the available Python images. There are very simple filtering and searching capabilities on Docker Hub that make it easy to quickly narrow down the options for your base image. NAVIGATE to https://hub.docker.com CLICK Explore CLICK Official Images CLICK Programming Languages CLICK Python Feel free to review the available images and read the supporting documentation about the images. This example will utilize a Python base image named slim-buster . Info Here are some instructions for building a base image if you so desire: Base Images","title":"Selecting a Base Image"},{"location":"sections/section_3/#create-the-initial-dockerfile","text":"Once you have selected the desired base image you can start to build your Dockerfile for the project. The first line of a Dockerfile is almost always the FROM command. The only other command that can precede FROM is ARG . This section keeps it simple and uses only FROM CREATE a new file named Dockerfile in the root of your project directory ADD the following first line \u200b FROM python:slim-buster","title":"Create the Initial Dockerfile"},{"location":"sections/section_3/#providing-meta-data","text":"Using the LABEL command we can include some information about the Dockerfile to increase supportability down the road. The LABEL command allows you to define a series of key and value pairs of attributes. # Define some meta data LABEL author = \"Jeff Andiorio\" email = \"jeff.andiorio@wwt.com\"","title":"Providing Meta Data"},{"location":"sections/section_3/#installing-os-requirements","text":"There will be many occasions where you will need to add some OS level packages that rely on a package manager for installation. In this case we are on a Debian Linux based system which uses apt as a package manager. In the Dockerfile you can use the RUN command to provide instructions to perform these package installations. The RUN instruction can be used for executing commands on the target container. This section will use the shell syntax. Check the Docker documentation for more information. # Update Debian Packages and Install Git RUN apt-get update && apt-get -y install git Since this will be our development environment we will need to have git installed in the container.","title":"Installing OS Requirements"},{"location":"sections/section_3/#create-a-working-directory","text":"A Working Directory is set to be the source directory for all subsequent RUN , CMD , COPY , and ADD Dockerfile Instructions. This walk-through will create a /development directory in our container and set it as our working directory Tip If the directory doesn't exist it will be created automatically. APPEND the WORKDIR instruction to the Dockerfile # Set the new directory WORKDIR /development","title":"Create a Working Directory"},{"location":"sections/section_3/#copy-files","text":"Another common need is to copy files into the container. When using the container as a development environment, Visual Studio Code will automatically mount the project directory and make the files available within the container. This relates to files you need to have available in the Docker image (aside from your development repo) like the requirements.txt file, so we can install packages. Scenario: The python project will require a couple of additional python packages. Create a requirements.txt file and make sure it's available to your Docker image. CREATE a file named requirements.txt in the project root directory ADD the text below to the file pyaml requests flake8 SAVE the file APPEND the COPY instruction to the Dockerfile # Copy requirements.txt into Container COPY requirements.txt /development","title":"Copy Files"},{"location":"sections/section_3/#installing-python-requirements","text":"Scenario: Just having the requirements.txt file will not install the required packages. Add the 'RUN' command to the Dockerfile to install your python project requirements. APPEND the RUN instruction to the Dockerfile to install the python requirements # Install Python Requirements RUN pip install -r requirements.txt Info The 'RUN' command above will look for the requirements.txt file in the WORKDIR which is where you copied the file.","title":"Installing Python Requirements"},{"location":"sections/section_3/#final-file","text":"If you have followed all the instructions, your final Dockerfile will look similar to this: Tip The LABEL instruction will have your information. FROM python:slim-buster # Define some meta data LABEL author = \"Jeff Andiorio\" email = \"jeff.andiorio@wwt.com\" # Update Debian Packages and Install Git RUN apt-get update && apt-get -y install git # Set the new directory WORKDIR /development # Copy requirements.txt into Container COPY requirements.txt /development # Install Python Requirements RUN pip install -r requirements.txt","title":"Final File"},{"location":"sections/section_3/#whats-next","text":"Now that you have the completed Dockerfile created and have successfully utilized several of the basic Dockerfile instructions how can you use that file?","title":"What's Next"},{"location":"sections/section_4/","text":"Integrate Docker with Visual Studio Code Visual Studio Code provides integrations with Docker that make the elements of your development environment (where you write code + where you execute code) complete seamless and highly portable. Just including the Dockerfile in your repository means anyone collaborating or consuming your code will have an identical execution environment as where developed the solution. Scenario: Integrate our Docker image into Visual Studio Code, so we can take advantage of the seamless development environment and utilize feature like the Python Debugger and Integrated terminal. Brief Overview of VSC Integration The Visual Studio Code Remote - Container extension is one of the extensions included with the bundle we installed earlier. This extension allows you to use a container as your fully-integrated development environment, exposing all the features of Visual Studio Code to you within it. There are multiple ways to utilize a container as your development environment within Visual Studio Code, but we will look at the most integrated and automated method. Developing inside a Container Create a .devcontainer.json Config File When Visual Studio Code start it looks for a configuration file named .devcontainer.json located either at the project root or in a subfolder named .devcontainer . The existence of this file will prompt Visual Studio Code to use the contents of that configuration file to map your development environment to a container. CREATE a file named .devcontainer.json in the root of your project ADD json formatted key/value for the Dockerfile { \"dockerFile\" : \"Dockerfile\" } Add Extensions Earlier you added some extensions to Visual Studio Code to support the build of our Dockerfile and integration with Visual Studio Code. Since your current project is a Python project you will want to add a Python extension to Visual Studio Code, and to the container specifically. CLICK the Extensions Icon on the left PASTE ms-python.python in the Search box and PRESS <enter> RIGHT-CLICK the extension and select \" Add to `devcontainer.json \" OPEN the devcontainer.json file and review the change \"devcontainer.json\" Open Project in Container All the pieces are now in place. You will need to reopen your project in the container to have your fully functional Docker container-based development environment activated. CLICK the at the bottom left SELECT Reopen in Container REVIEW the environment Attention Notice the bottom left corner shows Dev Container . This is confirmation that you are connected to a Remote Container using the devcontainer integration. Attention Notice the terminal (open one if it isn't open already) is inside the container (should show root@ ...). Attention Notice that a Python Interpretter has been automatically selected for you. What's Next The last thing for you to do is test the environment. The next and last sections will provide a very basic review of the environment.","title":"Create Devcontainer Configuration"},{"location":"sections/section_4/#integrate-docker-with-visual-studio-code","text":"Visual Studio Code provides integrations with Docker that make the elements of your development environment (where you write code + where you execute code) complete seamless and highly portable. Just including the Dockerfile in your repository means anyone collaborating or consuming your code will have an identical execution environment as where developed the solution. Scenario: Integrate our Docker image into Visual Studio Code, so we can take advantage of the seamless development environment and utilize feature like the Python Debugger and Integrated terminal.","title":"Integrate Docker with Visual Studio Code"},{"location":"sections/section_4/#brief-overview-of-vsc-integration","text":"The Visual Studio Code Remote - Container extension is one of the extensions included with the bundle we installed earlier. This extension allows you to use a container as your fully-integrated development environment, exposing all the features of Visual Studio Code to you within it. There are multiple ways to utilize a container as your development environment within Visual Studio Code, but we will look at the most integrated and automated method. Developing inside a Container","title":"Brief Overview of VSC Integration"},{"location":"sections/section_4/#create-a-devcontainerjson-config-file","text":"When Visual Studio Code start it looks for a configuration file named .devcontainer.json located either at the project root or in a subfolder named .devcontainer . The existence of this file will prompt Visual Studio Code to use the contents of that configuration file to map your development environment to a container. CREATE a file named .devcontainer.json in the root of your project ADD json formatted key/value for the Dockerfile { \"dockerFile\" : \"Dockerfile\" }","title":"Create a .devcontainer.json Config File"},{"location":"sections/section_4/#add-extensions","text":"Earlier you added some extensions to Visual Studio Code to support the build of our Dockerfile and integration with Visual Studio Code. Since your current project is a Python project you will want to add a Python extension to Visual Studio Code, and to the container specifically. CLICK the Extensions Icon on the left PASTE ms-python.python in the Search box and PRESS <enter> RIGHT-CLICK the extension and select \" Add to `devcontainer.json \" OPEN the devcontainer.json file and review the change \"devcontainer.json\"","title":"Add Extensions"},{"location":"sections/section_4/#open-project-in-container","text":"All the pieces are now in place. You will need to reopen your project in the container to have your fully functional Docker container-based development environment activated. CLICK the at the bottom left SELECT Reopen in Container REVIEW the environment Attention Notice the bottom left corner shows Dev Container . This is confirmation that you are connected to a Remote Container using the devcontainer integration. Attention Notice the terminal (open one if it isn't open already) is inside the container (should show root@ ...). Attention Notice that a Python Interpretter has been automatically selected for you.","title":"Open Project in Container"},{"location":"sections/section_4/#whats-next","text":"The last thing for you to do is test the environment. The next and last sections will provide a very basic review of the environment.","title":"What's Next"},{"location":"sections/section_5/","text":"Visual Studio Code Development Environment Review The goal of this walk-through was to expose you to the integrations with simple examples. This section validates the environment is ready for use. Python Integration In this section you will create a simple Python script to retrieve search results from iTunes. You are looking to validate the Python functionality within the Visual Studio Code Editor. Don't worry, you don't have to know any Python at this point... CREATE a file named search_itunes.py PASTE the Python code below import sys import requests # CONSTANTS BASE_URL = \"https://itunes.apple.com/search?country=US\" MEDIA = [ 'movie' , 'music' , 'podcast' ] # INPUT VARIABLES media = input ( \"What type of media? [movie, music, or podcast]: \" ) . lower () # VALIDATE INPUT if media not in MEDIA : print ( f \"Please type one of the valid options [ { MEDIA } ]\" ) sys . exit () term = input ( \"Enter search string: \" ) . lower () # INTERNAL VARIABLES _url = f \" { BASE_URL } &media= { media } &term= { term } \" _session = requests . session () # MAKE REST API CALL results = _session . get ( _url ) # EXTRACT RESULT DATA FROM RESONSE OBJECT data = results . json ()[ 'results' ] # LOOP OVER RESULTS AND PRINT for result in data : print ( f \" { result [ 'trackName' ] : <50 }{ result [ 'releaseDate' ] : >50 } \" ) SAVE the file CLICK the green play button ANSWER the prompts REVIEW the results The presence of the green play button indicates the Python extension is working. You can also see the Python Debugger on the left, the 4th icon down.","title":"Validate the Environment"},{"location":"sections/section_5/#visual-studio-code-development-environment-review","text":"The goal of this walk-through was to expose you to the integrations with simple examples. This section validates the environment is ready for use.","title":"Visual Studio Code Development Environment Review"},{"location":"sections/section_5/#python-integration","text":"In this section you will create a simple Python script to retrieve search results from iTunes. You are looking to validate the Python functionality within the Visual Studio Code Editor. Don't worry, you don't have to know any Python at this point... CREATE a file named search_itunes.py PASTE the Python code below import sys import requests # CONSTANTS BASE_URL = \"https://itunes.apple.com/search?country=US\" MEDIA = [ 'movie' , 'music' , 'podcast' ] # INPUT VARIABLES media = input ( \"What type of media? [movie, music, or podcast]: \" ) . lower () # VALIDATE INPUT if media not in MEDIA : print ( f \"Please type one of the valid options [ { MEDIA } ]\" ) sys . exit () term = input ( \"Enter search string: \" ) . lower () # INTERNAL VARIABLES _url = f \" { BASE_URL } &media= { media } &term= { term } \" _session = requests . session () # MAKE REST API CALL results = _session . get ( _url ) # EXTRACT RESULT DATA FROM RESONSE OBJECT data = results . json ()[ 'results' ] # LOOP OVER RESULTS AND PRINT for result in data : print ( f \" { result [ 'trackName' ] : <50 }{ result [ 'releaseDate' ] : >50 } \" ) SAVE the file CLICK the green play button ANSWER the prompts REVIEW the results The presence of the green play button indicates the Python extension is working. You can also see the Python Debugger on the left, the 4th icon down.","title":"Python Integration"},{"location":"sections/section_6/","text":"Wrap up The goal of this walk-through was to provide you real-world, hands-on exposure to building a Docker image. This is just the tip of the iceberg when it comes to what you can with Docker and Dockerfiles. You can take these same steps for you future projects and modify where needed to meet the needs of the project. Congratulations on building your first Dockerfile and integrating it with Visual Studio Code. The source repository for this page can be accessed by clicking the wwt/docker-foundations . In the source repository there is additional information and a very detailed PowerPoint presentation you can use as a reference.","title":"Closing"},{"location":"sections/section_6/#wrap-up","text":"The goal of this walk-through was to provide you real-world, hands-on exposure to building a Docker image. This is just the tip of the iceberg when it comes to what you can with Docker and Dockerfiles. You can take these same steps for you future projects and modify where needed to meet the needs of the project. Congratulations on building your first Dockerfile and integrating it with Visual Studio Code. The source repository for this page can be accessed by clicking the wwt/docker-foundations . In the source repository there is additional information and a very detailed PowerPoint presentation you can use as a reference.","title":"Wrap up"}]}